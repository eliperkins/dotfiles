" This must be first, because it changes other options
if &compatible
  set nocompatible
endif

" Plugin setup
filetype off

"NeoBundle Scripts-----------------------------
if has('vim_starting')
 " Required:
 set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

" My Bundles here:
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'b4winckler/vim-objc'
NeoBundle 'Blackrush/vim-gocode'
NeoBundle 'bling/vim-airline'
NeoBundle 'cfdrake/vim-carthage'
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'croaky/vim-colors-github'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'danro/rename.vim'
NeoBundle 'editorconfig/editorconfig-vim'
NeoBundle 'ervandew/supertab'
NeoBundle 'godlygeek/tabular'
NeoBundle 'jistr/vim-nerdtree-tabs'
NeoBundle 'jnwhiteh/vim-golang'
NeoBundle 'justmao945/vim-clang'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'Keith/investigate.vim'
NeoBundle 'Keith/specta.vim'
NeoBundle 'keith/swift.vim'
NeoBundle 'mattn/gist-vim'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'pbrisbin/vim-mkdir'
NeoBundle 'raichoo/haskell-vim'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'rking/ag.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'Shougo/vimshell'
NeoBundle 'sjl/vitality.vim'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'thoughtbot/vim-rspec'
NeoBundle 'tpope/vim-bundler'
NeoBundle 'tpope/vim-cucumber'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-liquid'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-surround'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'vim-scripts/camelcasemotion'
NeoBundle 'vim-scripts/ctags.vim'
NeoBundle 'vim-scripts/Match-Bracket-for-Objective-C'
NeoBundle 'vim-scripts/tComment'

call neobundle#end()

filetype plugin indent on " Re-enable after setup
syntax enable " Enable vim syntax highlighting as is (enable != on)

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

" Use Vim settings, rather then Vi settings. This setting must be as early as
" possible, as it has side effects.
set nocompatible

" Use space as leader!
let g:mapleader="\<Space>"

" I - Disable the startup message
" a - Avoid pressing enter after saves
set shortmess=Ia

set shell=$SHELL               " Set the default shell
set termencoding=utf-8         " Set the default encodings just in case $LANG isn't set
set encoding=utf-8             " Set the default encodings just in case $LANG isn't set
set autoindent                 " Indent the next line matching the previous line
set smartindent                " Smart auto-indent when creating a new line
set tabstop=2                  " Number of spaces each tab counts for
set shiftwidth=2               " The space << and >> moves the lines
set softtabstop=2              " Number of spaces for some tab operations
set shiftround                 " Round << and >> to multiples of shiftwidth
set expandtab                  " Insert spaces instead of actual tabs
set smarttab                   " Delete entire shiftwidth of tabs when they're inserted
set history=1000               " The number of history items to remember
set backspace=indent,eol,start " Backspace settings
set nostartofline              " Keep cursor in the same place after saves
set showcmd                    " Show command information on the right side of the command line
set isfname-==                 " Remove characters from filenames for gf

set ruler         " show the cursor position all the time
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands

function! s:EnsureDirectory(directory)
  if !isdirectory(expand(a:directory))
    call mkdir(expand(a:directory), 'p')
  endif
endfunction

" Save backup files, storage is cheap, losing changes is sad
set backup
set backupdir=$HOME/.tmp/vim/backup
call s:EnsureDirectory(&backupdir)

" Write undo tree to a file to resume from next time the file is opened
if has('persistent_undo')
  set undolevels=2000            " The number of undo items to remember
  set undofile                   " Save undo history to files locally
  set undodir=$HOME/.vimundo     " Set the directory of the undofile
  call s:EnsureDirectory(&undodir)
endif

set directory=$HOME/.tmp/vim/swap
call s:EnsureDirectory(&directory)

" On quit reset title
let &titleold=getcwd()

" Color scheme
let base16colorspace=256  " Access colors present in 256 colorspace
set background=dark
silent! colorscheme base16-ocean

set ttyfast                 " Set that we have a fast terminal
set t_Co=256                " Explicitly tell Vim that the terminal supports 256 colors
set lazyredraw              " Don't redraw vim in all situations
set synmaxcol=300           " The max number of columns to try and highlight
set noerrorbells            " Don't make noise
set autoread                " Watch for file changes and auto update
set showmatch               " Set show matching parenthesis
set matchtime=2             " The amount of time matches flash
set display=lastline        " Display super long wrapped lines
set number                  " Shows line numbers
set relativenumber
set cursorline              " Highlight the line the cursor is on
set nrformats-=octal        " Never use octal notation
set nojoinspaces            " Don't add 2 spaces when using J
set mouse=a                 " Enable using the mouse if terminal emulator
set mousehide               " Hide the mouse on typing
set hlsearch                " Highlight search terms
set incsearch               " Show searches as you type
set wrap                    " Softwrap text
set linebreak               " Don't wrap in the middle of words
set ignorecase              " Ignore case when searching
set smartcase               " Ignore case if search is lowercase, otherwise case-sensitive
set title                   " Change the terminal's title
set updatetime=2000         " Set the time before plugins assume you're not typing
set scrolloff=5             " Lines the cursor is to the edge before scrolling
set sidescrolloff=5         " Same as scrolloff but horizontal
set gdefault                " Adds g at the end of substitutions by default
set virtualedit=block       " Allow the cursor to move off the side in visual block
set foldlevelstart=99       " Set the default level of open folds
set foldmethod=indent       " Decide where to fold based
set foldnestmax=5           " Set deepest fold to x levels
set exrc                    " Source local .vimrc files
set secure                  " Don't load autocmds from local .vimrc files
set colorcolumn=+1          " Show a line past the text width
set tags^=.tags             " Add local .tags file

" Default text width to 80
if &textwidth == 0
  set textwidth=80
endif

" Don't have a text width for readonly files
if &readonly
  set textwidth=0
endif

" Completion options
set complete=.,w,b,u,t,i,kspell
set completeopt=menu
set wildmenu                                           " Better completion in the CLI
set wildmode=longest:full,full                         " Completion settings

" Ignore these folders for completions
set wildignore+=.hg,.git,.svn                          " Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg         " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.pyc " compiled object files
set wildignore+=tags,.tags

" Set mapping and key timeouts
set timeout
set timeoutlen=1000
set ttimeoutlen=100

" Setting to indent wrapped lines
if exists('+breakindent')
  set breakindent
  set breakindentopt=shift:2
endif

" Check for file specific vim settings in the last 3 lines of the file
set modeline
set modelines=2

if has('clipboard')     " If the feature is available
  set clipboard=unnamed " copy to the system clipboard

  if has('unnamedplus')
    set clipboard+=unnamedplus
  endif
endif

nnoremap Q :quit<CR>

nnoremap W :write<CR>

vnoremap K <Nop>

" Reselect visual blocks after movement
vnoremap < <gv
vnoremap > >gv

" Move as expected on wrapped lines
noremap j gj
noremap gj j
noremap <Down> gj
inoremap <Down> <C-o>gj
noremap k gk
noremap gk k
noremap <Up> gk
inoremap <Up> <C-o>gk

" Computers are dumb
" scroll gets reset every time the window is resized
nnoremap <C-u> 10<C-u>
nnoremap <C-d> 10<C-d>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Remap capital y to act more like other capital letters
nnoremap Y y$

" Force root permission saves
cnoremap w!! w !sudo tee % >/dev/null

command! -bang Q q<bang>
command! -bang -nargs=* -complete=file W w<bang> <args>

" Change the way splits open by default
set splitbelow
set splitright

" Better movement
nnoremap H ^
vnoremap H ^

" Switch to the last file
nnoremap <leader><leader> <C-^>

" Move to last edit location and put it in the center of the screen
nnoremap <C-o> <C-o>zz

" Remove the last search thus clearing the highlight
" This clears the search register denoted by @/
nnoremap <silent> <leader>4 :let @/=""<CR>

" Don't automatically jump on search
nnoremap * :keepjumps normal! mi*`i<CR>
nnoremap # :keepjumps normal! mi#`i<CR>

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Jump to next/previous merge conflict marker
nnoremap <silent> ]c /\v^(\<\|\=\|\>){7}([^=].+)?$<CR>
nnoremap <silent> [c ?\v^(\<\|\=\|\>){7}([^=].+)\?$<CR>

" Close all the lists
nnoremap <leader>q call s:CloseLists()<CR>
function! s:CloseLists()
  lclose
  cclose
  pclose
  silent! TagbarClose
endfunction

command! ClearWhitespace call s:ClearWhitespace()
function! s:ClearWhitespace()
  let l:backup = @/
  let l:line = line('.')
  let l:column = col('.')
  silent! %s/\s\+$//e
  let @/=l:backup
  call cursor(l:line, l:column)
endfunction

function! s:ClearWhitespaceIfExpected()
  if &ft =~? 'markdown'
    return
  endif

  call s:ClearWhitespace()
endfunction

" Unfuck my screen
nnoremap U :syntax sync fromstart<CR>:redraw!<CR>

" Running as diff
if &diff
  set modifiable
  set noreadonly
  if tabpagenr('$') == 1
    nnoremap ZZ :wqall<cr>
  endif
endif

" Position resume
function! s:PositionRecall()
  if &ft =~? 'gitcommit\|gitrebase'
    return
  endif

  if line("'\"") > 0 && line("'\"") <= line('$')
    execute "normal g`\"zz"
  endif
endfunction

" Window sizes
augroup window_sizes
  autocmd!

  " Set the minimum window width for vertical splits
  autocmd VimEnter * silent! set winwidth=80
  autocmd VimEnter * silent! set winminwidth=20
augroup END

" Various filetype settings
augroup ft_settings
  autocmd!

  " Comment string settings
  if empty(&commentstring) | setlocal commentstring=#\ %s | endif
  autocmd FileType c,cpp,go,objc,php setlocal commentstring=//\ %s

  " Save files on some focus lost events, like switching splits
  autocmd BufLeave,FocusLost * silent! wall

  " Don't auto insert a comment when using O/o for a newline
  autocmd VimEnter,BufRead * set formatoptions-=o

  " Return to the same position you left the file in
  autocmd BufRead * call s:PositionRecall()

  " Clear whitespace on save
  autocmd BufWritePre * call s:ClearWhitespaceIfExpected()

  autocmd CursorHold <buffer> checktime
augroup END

augroup cursorline
  autocmd!
  autocmd WinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

" Display extra whitespace
set list listchars=tab:»·,trail:·

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" GVim
if has('gui_running')
  set guifont=Menlo:h15
  set guioptions=egmrt " hide the gui menubar
endif

" Syntastic
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1

let g:syntastic_html_tidy_ignore_errors = [" proprietary attribute \"ng-"]
let g:syntastic_python_flake8_args = "--ignore = E501"
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_haskell_checkers = ['ghc-mod', 'hdevtools']
let g:hdevtools_options = '-g -Wall'

let g:syntastic_objc_compiler = 'clang'
let g:syntastic_objcpp_compiler = 'clang'
" let g:syntastic_objc_gcc_quiet_messages = { "regex": 'file not found' }
let g:syntastic_objc_check_header = 1

let s:pch_paths = ['*/*.pch', 'Resources/*/*.pch']
for path in s:pch_paths
  if !empty(glob(path))
    let b:syntastic_objc_cflags = '-include ' . expand(path)
    break
  endif
endfor

" Allow toggling of syntastic errors list
" http://stackoverflow.com/questions/17512794/toggle-error-location-panel-in-syntastic
function! ToggleErrors()
  " Check the total number of open windows
  let old_last_winnr = winnr('$')
  " Attempt to close the location list
  lclose
  " If there are still the same number of windows
  " Open the errors list
  if old_last_winnr == winnr('$')
    Errors
  endif
endfunction
nnoremap <leader>e :call ToggleErrors()<cr>

let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1

let g:nerdtree_tabs_open_on_console_startup=1

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

" ObjC curly brace error fix
let g:c_no_curly_error = 1

" clang_complete
let g:clang_close_preview = 1
let g:clang_complete_macros = 1
let g:clang_complete_patterns = 1
let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libclang.dylib'
let g:clang_snippets = 1
let g:clang_snippets_engine = 'ultisnips'
let g:clang_use_library = 1
let g:clang_auto_user_options = "compile_commands.json"
let g:clang_make_default_keymappings = 0

" vim-markdown
let g:markdown_fenced_languages = ['ruby', 'sh', 'objc', 'vim', 'swift']

" All of supertab in one function. #trolol
let g:invalid_tab_chars = ['^', '\^', '\s', '#', '/', '\\', '*']
function! ForceTab()
  let column = col('.') - 1
  let lastchar = getline('.')[column - 1]
  let iskeychar = lastchar =~ '\k' || lastchar == '.'
  let invalidchar = index(g:invalid_tab_chars, lastchar) < 0
  return !(column > 0 && (iskeychar && invalidchar))
endfunction

" Gist support
let g:gist_detect_filetype = 1
let g:gist_clip_command = 'pbcopy'
let g:gist_show_privates = 1
let g:gist_post_private = 1

" Dash support
let g:investigate_use_dash=1

" Airline
let g:airline#extensions#tabline#enabled = 1

" vitality.vim
let g:vitality_fix_cursor = 0
" Need to make tmux FocusLost events work in Terminal.app
let g:vitality_always_assume_iterm = 1

" Type modifiers
syn keyword objcTypeModifier
      \ __autoreleasing
      \ __block
      \ __bridge
      \ __bridge_retained
      \ __bridge_transfer
      \ __strong
      \ __typeof
      \ __unsafe_unretained
      \ __weak

" Property keywords - these are only highlighted inside '@property (...)'
syn keyword objcPropertyAttribute contained
      \ assign
      \ copy
      \ getter
      \ nonatomic
      \ readonly
      \ readwrite
      \ retain
      \ setter
      \ strong
      \ weak

syn match objcProperty display "^\s*@property\>\s*([^)]*)" contains=objcPropertyAttribute

" The @property directive must be defined after objcProperty or it won't be
" highlighted
syn match objcDirective "@property\|@synthesize\|@dynamic\|@package"

syn match objcPointerClass "\v\h+(\s*[*])@="
syn match objcDotProperty "\v(\.)@<=\h+"
syn match objcInstanceVariable "\(*\|\[\| \)\@<=_\h\+"

syn match objcCFunction "\v\w+[(]@="
syn match objcPrimitives "NSInteger\|NSUInteger\|CGFloat\|NSTimeInterval"

syn region objc2Hash transparent matchgroup=objc2HashBraces start="@{" end="}"
syn region objc2Array transparent matchgroup=objc2ArrayBraces start="@\[" end="]"
syn region objc2Number transparent matchgroup=objc2NumberBraces start="@(" end=")"
syn region objc2Block transparent matchgroup=objc2BlockBraces start="\(\^.*\)\@<={" end="}"

syn match objcMessageName "\s\@<=\w*\(]\|:\)\@=" contained
syn match objcMessageClass "\(\[\s*\)\@<=\u\w*" contained
syn region objcCorrectMessage transparent matchgroup=objCorrectMessage start="\[" end="\]"
      \ contains=objc.*,cConditional,cStatement

syn keyword objcWrappedConstant
      \ nil
      \ NO
      \ NULL
      \ YES

syn keyword objcIBRWords
      \ IBAction
      \ IBOutlet

" link to the standard
hi def link objcTypeModifier                         Statement
hi def link objcProperty                             Statement
hi def link objcDirective                            Statement
hi def link objcPropertyAttribute                    Statement
hi def link objcPointerClass                         objcPointer
hi def link objcMessageClass                         objcPointer
hi def link objcDotProperty                          Identifier
hi def link objcInstanceVariable                     Identifier
hi def link objc2HashBraces                          Constant
hi def link objc2ArrayBraces                         Constant
hi def link objc2NumberBraces                        Constant
hi def link objcMessageName                          Function
hi def link objcCFunction                            Operator
hi def link objcSpecial                              String
hi def link objcWrappedConstant                      Statement
hi def link objcIBRWords                             Statement
hi def link objcPointer                              Type
hi def link objcPrimitives                           cType

" Concatenate the directory into the ls-files command
function! s:GitListCommand(directory)
  return "git ls-files " . a:directory . " --cached --exclude-standard --others"
endfunction

" Command for searching folders even if they
" aren't tracked with git
function! s:SearchCommand()
  let l:command = ""
  if isdirectory(".git")
    let l:command = s:GitListCommand(".")
  endif

  if strlen(l:command) < 1
    let l:output = system("git rev-parse --show-toplevel")
    if v:shell_error == 0
      let l:output = substitute(l:output, "\\n", "", "")
      let l:command = s:GitListCommand(l:output)
    else
      let l:command = "find * -type f -o -type l"
    endif
  endif

  return l:command
endfunction

function! s:EscapeFilePath(path)
  return substitute(a:path, ' ', '\\ ', 'g')
endfunction

function! FuzzyFindCommand(vimCommand)
  try
    let selection = system(s:SearchCommand() . " | pick")
  catch /Vim:Interrupt/
    " Catch the ^C so that the redraw happens
    redraw!
    return
  endtry
  redraw!
  exec ":" . a:vimCommand . " " . s:EscapeFilePath(selection)
endfunction

nnoremap <C-p>  :call FuzzyFindCommand("edit")<cr>
nnoremap <C-p>e :call FuzzyFindCommand("edit")<cr>
nnoremap <C-p>v :call FuzzyFindCommand("vsplit")<cr>
nnoremap <C-p>s :call FuzzyFindCommand("split")<cr>

command! GenerateCtags call s:GenerateCtags()
function! s:GenerateCtags()
  let tagfile = '.tags'
  if filereadable('tags')
    let tagfile = 'tags'
  endif

  let filepath = s:TopLevel() . tagfile
  let cmd = "ctags -f " . filepath
  if filereadable(filepath)
    let cmd .= ' --append ' . expand('%')
  else
    let cmd .= ' --recurse .'
  endif

  silent call system(cmd)
  let &tags .= (empty(&tags) ? '' : ',') . filepath
endfunction

function! s:TopLevel()
  if isdirectory('.git')
    return getcwd() . '/'
  endif

  let output = system('git rev-parse --show-toplevel')
  if v:shell_error == 0
    let output = substitute(output, "\\n", '', 'g')
    return output . '/'
  endif

  return ''
endfunction
